import os

chip8_fontset = [
  0xF0, 0x90, 0x90, 0x90, 0xF0, # 0
  0x20, 0x60, 0x20, 0x20, 0x70, # 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, # 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, # 3
  0x90, 0x90, 0xF0, 0x10, 0x10, # 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, # 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, # 6
  0xF0, 0x10, 0x20, 0x40, 0x40, # 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, # 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, # 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, # A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, # B
  0xF0, 0x80, 0x80, 0x80, 0xF0, # C
  0xE0, 0x90, 0x90, 0x90, 0xE0, # D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, # E
  0xF0, 0x80, 0xF0, 0x80, 0x80  # F
]

schip_fontset = [
  0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, # 0
  0x0C, 0x0C, 0x3C, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x3F, # 1
  0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, # 2
  0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, # 3
  0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, # 4
  0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, # 5
  0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, # 6
  0xFF, 0xFF, 0x03, 0x03, 0x0C, 0x0C, 0x30, 0x30, 0x30, 0x30, # 7
  0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, # 8
  0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, # 9

  0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, # A -
  0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, # B -
  0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, # C -
  0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF, # D -
  0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, # E -
  0xFF, 0xFF, 0x07, 0x07, 0xFF, 0xFF, 0xE0, 0xE0, 0xFF, 0xFF  # F -
]

# Memory Map
#
# +----------------+= 0xFFF (4095) End of Chip-8 RAM
# |                |
# |                |
# |                |
# |                |
# |                |
# | 0x200 to 0xFFF |
# | Chip-8 Program |
# |                |
# |                |
# |                |
# |                |
# |                |
# +- - - - - - -  -+= 0x600 (1536) Start of ETI 660 Chip-8 programs
# |                |
# |                |
# |                |
# +----------------+= 0x200 (512) Start of most Chip-8 programs
# | 0x000 to 0x1FF |
# | Reserved for   |
# |  interpreter   |
# +----------------+= 0x000 (0) Start of Chip-8 RAM
memory = [0] * 0x1000

# Registers: One of the 16 available variables
# vn[0xF] is used for flags - carry, borrow and pixel collision
vn = [0] * 16

# registors - super chip
rpl = [0] * 8

# The Stack - Used for returns, normally has 48 bytes and 12 levels
stack = []

def initialize():
  global chip8_fontset, schip_fontset, memory, vn, rpl, stack 
  
  memory = [0] * 0x1000

  vn = [0] * 16

  rpl = [0] * 8

  stack = []

  # Load fontsets
  for i in range(80):
    memory[i] = chip8_fontset[i]

  for i in range(160):
    memory[i + 80] = schip_fontset[i]


def load_file(rom):
  global memory
  
  initialize()
  
  # Load the ROM into RAM.
  with open(rom, 'rb') as rom:
    rom_length = os.fstat(rom.fileno()).st_size

    if rom_length > 0xFFF - 0x200 + 1: 
      raise "The given file is too big to be a CHIP-8 ROM."
  
    for i in range(0, rom_length):
      memory[0x200 + i] = int.from_bytes(rom.read(1), "big")
